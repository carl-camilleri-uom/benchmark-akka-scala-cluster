akka {
  actor {
    provider = "cluster"
    serialize-messages = off
    serialize-creators = off
    allow-java-serialization = off
    serialization-bindings {
      "MySerializable" = jackson-cbor
    }
    prio-dispatcher {
      type = "Dispatcher"
      executor = "thread-pool-executor"
      thread-pool-executor {
        core-pool-size-min = 8
        core-pool-size-factor = 3.0
        core-pool-size-max = 64
        max-pool-size-min = 8
        max-pool-size-factor = 3.0
        max-pool-size-max = 64
        task-queue-size = -1
        task-queue-type = "linked"
        keep-alive-time = 60s
        allow-core-timeout = on
      }

    }
    default-dispatcher = {
      throughput = 100
      fork-join-executor { #channelexecutor will re-use these settings
        parallelism-min = 8
        parallelism-factor = 2
        parallelism-max = 64
      }
    }
  }

  remote {
    default-remote-dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 8
        parallelism-factor = 2
        parallelism-max = 64
      }
      throughput = 100
    }
  }

  remote.artery {
    transport = aeron-udp
    canonical {
      hostname = "instance-1"
      port = 2551
    }
    advanced {
      inbound-lanes = 1
    }
    aeron {
      idle-cpu-level = 10

    }
  }

  cluster {
    seed-nodes = [
      "akka://ping-pong-cluster-system@instance-1:2551",
      "akka://ping-pong-cluster-system@instance-2:2551"]


    sharding = {
      use-dispatcher = "akka.actor.prio-dispatcher"
      buffer-size = 10

    }
  }
}